!function(){"use strict";void 0===CanvasRenderingContext2D.prototype.shadowInset&&function(){function t(t){var a=void 0;return i.has(t)?a=i.get(t):(a=document.createElement("canvas"),document.body.appendChild(a),i.set(t,a)),a}function a(t,a){var e=h[t];h[t]=function(){!0===this.shadowInset?a(this,e,arguments):e.apply(this,arguments)}}function e(t,a,e){var n=a.width+2*e,o=a.height+2*e;(t.width!==n||t.height!==o)&&(t.width!==n&&(t.width=n),t.height!==o&&(t.height=o),t.getContext("2d").translate(e,e))}function n(t,a){s.forEach(function(e){var n=t[e];t[e]=a[e],a[e]=n})}function o(t){var a={};return s.forEach(function(e){a[e]=t[e]}),a}var i=new WeakMap,h=CanvasRenderingContext2D.prototype,r=h.fillRect,c=h.drawImage,d=["fill","fillRect","drawImage"],l=["beginPath","closePath","moveTo","lineTo","bezierCurveTo","quadraticCurveTo","arc","arcTo","rect"];h.shadowInset=!1,l.forEach(function(n){a(n,function(a,n,o){var i=a.canvas,h=t(i),r=h.getContext("2d");e(h,i,Math.max(i.width,i.height)),n.apply(r,o),n.apply(a,o)})}),d.forEach(function(i){a(i,function(a,i,h){var d=a.canvas,l=t(d),s=l.getContext("2d"),f=Math.max(d.width,d.height);e(l,d,f),i.apply(s,h),s.globalCompositeOperation="xor",s.fillStyle="black",r.apply(s,[-f,-f,l.width,l.height]);o(a),o(s);n(s,a),c.apply(s,[l,-f,-f]),i.apply(a,h),c.apply(a,[l,f,f,d.width,d.height,0,0,d.width,d.height]),n(s,a)})});var s=["shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor"]}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
